#QUESTION 1
import random   #importation of the random function to aid in the generation of random numners.
def dotProduct(N, ListA, ListB): #funtion that contains the respective vairables to aid in the execution of finding the dot product.
    ListA=[]
    ListB=[]
    ListC=[] #the ListC is where the dot product calculated will be put in.
    for a in range(N):  #for loop to run the numbers till it gets to the last number.
        ListA.append(random.randint(1,1000)) #the append function used to add any new number generated by the random numbers generator
        ListB.append(random.randint(1,1000))
        ListC.append(ListA[a]*ListB[a])
    print(sum(ListC))    
    


#QUESTION 2

import math #math function to aid in the calculation of the area and perimeter of the rectangles
class Point:#class created for the points of the rectangle with variables X and Y
    def __init__(self, x, y):
        self.x=x
        self.y=y


    def getX(self):
       return self.x
    def getY(self):
       return self.y  #Getter function to call X and Y points respectively
class Rectangle:# class Rectangle to describe the sides of the various corners or parts of the rectangle
    def __init__(self, buttomleftcorner, toprightcorner):
        self.buttomleftcorner=buttomleftcorner
        self.toprightcorner=toprightcorner
        self.length=self.__getLength(self.buttomleftcorner.getX(),self.toprightcorner.getX())
        self.width=self.__getLength(self.buttomleftcorner.getY(),self.toprightcorner.getY())
    def getbuttomleftcorner(self):
        return self.buttomleftcorner
    def gettoprightcorner(self):
        return self.toprightcorner
    def gettopleftcorner(self):
        print(self.getbuttomleftcorner().getX(),self.toprightcorner.getY())
        return Point(self.getbuttomleftcorner().getX(),self.toprightcorner.getY())
    def getbuttomrightcorner(self):
        return Point(self.gettoprightcorner().getX(),self.buttomleftcorner.getY())
    def __getLength(self, cordinate1, cordinate2):
        length=math.sqrt((cordinate1**2)+(cordinate2**2))
        return length #getter functions above to call all the various sides of the rectangle
    def area(self):
        return self.length*self.width
    def perimeter(self):
        return 2*self.length+2*self.width #functions above are used in the calculation of the area. and perimeter of the rectangle.
                                          #contains various formuli for finding the area and perimeter.  
                                

def Intersect(Rectangle1,Rectangle2):    #function created to be used to determine whether the rectangles intersect or not.
        toprightcorner1=Rectangle1.gettoprightcorner()
        toprightcorner2=Rectangle2.gettoprightcorner()
        buttomleftcorner1=Rectangle1.getbuttomleftcorner()
        buttomleftcorner2=Rectangle2.getbuttomleftcorner()
        topleftcorner1=Rectangle1.gettopleftcorner()
        topleftcorner2=Rectangle2.gettopleftcorner()
        buttomrightcorner1=Rectangle1.getbuttomrightcorner()
        buttomrightcorner2=Rectangle2.getbuttomrightcorner() #variables to represent the various sides of the rectangle.

        """Taking Rectangle1 as the base rectangle"""
        IntersectionArray1=[False, False, False, False] #creating a list of false to make the allocation of conditions easier.
        if IsPointInside(toprightcorner2,Rectangle1):
            IntersectionArray[0]=True
        if IsPointInside(topleftcorner2,Rectangle1):
            IntersectionArray[1]=True
        if IsPointInside(buttomrightcorner2,Rectangle1):
            IntersectionArray[2]=True
        if IsPointInside(topleftcorner2,Rectangle1):
            IntersectionArray[3]=True
        if IntersectionArray1.count(True)>0 and IntersectionArray1.count(True)<3:
            return True
        print(IntersectionArray1)
        """Taking Rectangle2 as the base rectangle"""
        IntersectionArray2=[False, False, False, False]
        if IsPointInside(toprightcorner2,Rectangle2):
            IntersectionArray2[0]=True
        if IsPointInside(topleftcorner2,Rectangle2):
            IntersectionArray2[1]=True
        if IsPointInside(buttomrightcorner2,Rectangle2):
            IntersectionArray2[2]=True
        if IsPointInside(topleftcorner2,Rectangle2):
            IntersectionArray2[3]=True
        print(IntersectionArray2)
        if IntersectionArray1.count(True)>0 and IntersectionArray1.count(True)<3:
            return True
        else:
            return False

        
def IsPointInside(point, Rectangle):
    if not (point.getX()>Rectangle.getbuttomleftcorner().getX() and point.getX()<Rectangle.getbuttomrightcorner().getX()):        
        return False
    if not (point.getY()>Rectangle.getbuttomleftcorner().getY() and point.getY()<Rectangle.gettoprightcorner().getY()):
        return False
    else:
        return True #the above if-else statements are used to see whether the rectangles intersect each other or not at a point in time and to print either true or false depending on whether they interesect or not.
PointA=Point(0,0)
print(PointA.getX())
PointB=Point(3,4)
PointC=Point(2,3)
PointD=Point(6,8)
Rectangle1=Rectangle(PointA,PointB)
Rectangle2=Rectangle(PointC,PointD)
print(Rectangle1.area())
print(Rectangle1.perimeter())
print(Rectangle2.area())
print(Rectangle2.perimeter())
print(Intersect(Rectangle1, Rectangle2)) #the above is the call out the code written to see if they work correctly that is putting in
#values to calculate the area and perimeter of the rectangles and also putting
#cordinates to check if they intersect or not.
    
